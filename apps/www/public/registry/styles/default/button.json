{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\"transition-colors font-medium\", {\n  variants: {\n    variant: {\n      default: \"bg-gray-1000 text-background-100 hover:bg-gray-1000/90\",\n      error: \"bg-red-800 hover:bg-destructive/90\",\n      warning: \"bg-amber-800 text-destructive-foreground hover:bg-amber-800/90\",\n      outline:\n        \"border border-input bg-background-200 hover:bg-accent hover:text-accent-foreground\",\n      secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      ghost: \"hover:bg-accent hover:text-accent-foreground\",\n      link: \"text-primary underline-offset-4 hover:underline\",\n    },\n    size: {\n      sm: \"h-8 px-3 rounded-md text-sm\",\n      small: \"h-8 px-3 rounded-md text-sm\",\n      md: \"h-10 px-4 rounded-md text-sm\",\n      medium: \"h-10 px-4 rounded-md text-sm\",\n      lg: \"h-12 px-5 rounded-lg text-base\",\n      large: \"h-12 px-5 rounded-lg text-base\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"medium\",\n  },\n})\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}