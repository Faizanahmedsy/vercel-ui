{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Spinner } from \"./spinner\"\n\nconst buttonVariants = cva(\n  \"transition-colors font-medium border flex justify-center items-center gap-0.5 max-w-full disabled:bg-gray-100 disabled:text-gray-700 disabled:border-gray-400 disabled:cursor-not-allowed\",\n  {\n    variants: {\n      variant: {\n        // Vercel has some of these hard coded values in the specs, not sure why tbh. Could be worth looking at some point\n        default: \"bg-gray-1000 text-background-100 hover:bg-[#ccc]\",\n        secondary:\n          \"bg-background-100 border-gray-alpha-400 text-gray-1000 hover:bg-gray-alpha-200\",\n        tertiary:\n          \"bg-transparent border-transparent text-gray-1000 hover:bg-gray-alpha-200\",\n        error:\n          \"bg-red-800 border-red-800 hover:bg-red-900 hover:border-red-900\",\n        warning:\n          \"text-[#0a0a0a] bg-amber-800 border-amber-800 hover:bg-[#d27504] hover:border-[#d27504\",\n      },\n      size: {\n        tiny: \"h-6 px-0.5 rounded-[4px] text-xs leading-4\",\n        small: \"h-8 px-1.5 rounded-md text-sm leading-5\",\n        medium: \"h-10 px-2.5 rounded-md text-sm leading-5\",\n        large: \"h-12 px-[14px] rounded-lg text-base leading-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"medium\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"prefix\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  shape?: \"square\" | \"circle\" | \"rounded\"\n  svgOnly?: boolean\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  shadow?: boolean\n  loading?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      shape,\n      svgOnly,\n      prefix,\n      suffix,\n      shadow,\n      loading,\n      children,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          (shape === \"rounded\" || shape === \"circle\") && \"rounded-full\",\n          svgOnly && \"aspect-square\",\n          shadow && \"shadow-sm\"\n        )}\n        ref={ref}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading ? <Spinner size={size === \"large\" ? 24 : 16} /> : prefix}\n        <span className=\"px-1.5 text-ellipsis\">{children}</span>\n        {loading ? null : suffix}\n      </Comp>\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}