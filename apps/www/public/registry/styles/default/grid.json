{
  "name": "grid",
  "files": [
    {
      "name": "grid.tsx",
      "content": "import React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface GridSystemProps {\n  guideWidth: number\n  children: React.ReactNode\n}\n\nconst GridSystem: React.FC<GridSystemProps> = ({\n  guideWidth = 1,\n  children,\n}) => {\n  return (\n    <div\n      className=\"relative before:absolute before:inset-0 before:left-[calc(-1*var(--guide-width))] before:top-[calc(-1*var(--guide-width))] before:border-solid before:border-gray-400 before:content-[''] before:[border-width:var(--guide-width)]\"\n      style={{\n        // @ts-ignore\n        \"--guide-width\": `${guideWidth}px`,\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\ninterface GridProps {\n  children: React.ReactNode\n  columns: number | { [key in BreakPoint]?: number }\n  rows: number | { [key in BreakPoint]?: number }\n}\n\nconst breakpoints = {\n  sm: \"640px\", // Example breakpoint min-widths\n  md: \"768px\",\n  lg: \"1024px\",\n  xl: \"1280px\",\n}\n\ntype BreakPoint = keyof typeof breakpoints\n\nconst Grid: React.FC<GridProps> = ({ children, columns = 1, rows = 1 }) => {\n  // TODO change this to do media query checks\n  const realColumnCount: number =\n    typeof columns === \"number\" ? columns : columns.md || 0\n  const realRowCount: number = typeof rows === \"number\" ? rows : rows.md || 0\n\n  const columnStyles: React.CSSProperties =\n    typeof columns === \"object\"\n      ? Object.entries(columns).reduce(\n          (acc, [breakpoint, value]) => {\n            acc[`--${breakpoint}-grid-columns`] = String(value)\n            return acc\n          },\n          {} as Record<string, string>\n        )\n      : {\n          \"--grid-columns\": String(columns),\n        }\n\n  const rowStyles: React.CSSProperties =\n    typeof rows === \"object\"\n      ? Object.entries(rows).reduce(\n          (acc, [breakpoint, value]) => {\n            acc[`--${breakpoint}-grid-rows`] = String(value)\n            return acc\n          },\n          {} as Record<string, string>\n        )\n      : {\n          \"--grid-rows\": String(rows),\n        }\n\n  const guideCount = realColumnCount * realRowCount\n\n  return (\n    <div\n      className={cn(\n        \"relative grid\",\n        typeof columns === \"object\"\n          ? [\n              columns?.sm &&\n                \"xl:grid-cols-[repeat(var(--sm-grid-columns),_1fr)]\",\n              columns?.md &&\n                \"xl:grid-cols-[repeat(var(--md-grid-columns),_1fr)]\",\n              columns?.lg &&\n                \"xl:grid-cols-[repeat(var(--lg-grid-columns),_1fr)]\",\n              columns?.xl &&\n                \"xl:grid-cols-[repeat(var(--xl-grid-columns),_1fr)]\",\n            ]\n          : \"grid-cols-[repeat(var(--grid-columns),_1fr)]\",\n        typeof rows === \"object\"\n          ? [\n              rows?.sm && \"xl:grid-rows-[repeat(var(--sm-grid-rows),_1fr)]\",\n              rows?.md && \"xl:grid-rows-[repeat(var(--md-grid-rows),_1fr)]\",\n              rows?.lg && \"xl:grid-rows-[repeat(var(--lg-grid-rows),_1fr)]\",\n              rows?.xl && \"xl:grid-rows-[repeat(var(--xl-grid-rows),_1fr)]\",\n            ]\n          : \"grid-rows-[repeat(var(--grid-rows),_1fr)]\"\n      )}\n      style={{ ...columnStyles, ...rowStyles }}\n    >\n      {children}\n      <div className=\"pointer-events-none z-[1] contents\" aria-hidden>\n        {Array.from({ length: guideCount }).map((_, index) => (\n          <div\n            key={index}\n            className=\"absolute inset-0 col-start-[var(--x)] col-end-[span_1] row-start-[var(--y)] row-end-[span_1] border-solid border-gray-400 [border-left:none] [border-top:none] [border-width:var(--guide-width)]\"\n            style={\n              {\n                \"--x\": (index % realColumnCount) + 1,\n                \"--y\": Math.floor(index / realColumnCount) + 1,\n              } as React.CSSProperties\n            }\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\ninterface GridCellProps {\n  column?: { [key in BreakPoint]?: string | number }\n  row?: { [key in BreakPoint]?: string | number }\n  className?: string\n  children?: React.ReactNode\n}\n\nconst GridCell: React.FC<GridCellProps> = ({\n  column,\n  row,\n  className,\n  children,\n}) => {\n  return (\n    <div\n      className={cn(\n        \"z-[2] mb-[var(--guide-width)] mr-[var(--guide-width)] p-6 [grid-column:var(--grid-column)] [grid-row:var(--grid-row)] md:p-8 lg:p-10 xl:p-12\",\n        className\n      )}\n      style={\n        {\n          \"--x\": 1,\n          \"--y\": 1,\n        } as React.CSSProperties\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport { GridSystem, Grid, GridCell }\n"
    }
  ],
  "type": "components:ui"
}