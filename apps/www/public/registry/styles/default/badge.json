{
  "name": "badge",
  "files": [
    {
      "name": "badge.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport type { LucideIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-full capitalize whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        gray: \"bg-gray-700 text-contrast\",\n        \"gray-subtle\": \"bg-gray-200 text-gray-1000\",\n        blue: \"bg-blue-700 text-contrast\",\n        \"blue-subtle\": \"bg-blue-200 text-blue-900\",\n        purple: \"bg-purple-700 text-contrast\",\n        \"purple-subtle\": \"bg-purple-200 text-purple-900\",\n        amber: \"bg-amber-700 text-black\",\n        \"amber-subtle\": \"bg-amber-200 text-amber-900\",\n        red: \"bg-red-700 text-contrast\",\n        \"red-subtle\": \"bg-red-200 text-red-900\",\n        pink: \"bg-pink-700 text-contrast\",\n        \"pink-subtle\": \"bg-pink-300 text-pink-900\",\n        green: \"bg-green-700 text-contrast\",\n        \"green-subtle\": \"bg-green-200 text-green-900\",\n        teal: \"bg-teal-700 text-contrast\",\n        \"teal-subtle\": \"bg-teal-300 text-teal-900\",\n        // TODO revisit this pink color\n        trial: \"bg-gradient-to-br from-blue-700 to-[#f81be6] text-white\",\n        turbo: \"bg-gradient-to-br from-[#ff1e56] to-[#0096ff] text-white\",\n      },\n      size: {\n        sm: \"px-1.5 h-5 text-[11px] gap-0.5 [&_svg]:w-[11px] [&_svg]:h-[11px]\",\n        md: \"px-2.5 h-6 text-xs gap-1 [&_svg]:w-[14px] [&_svg]:h-[14px]\",\n        lg: \"px-3 h-8 text-sm gap-1.5 [&_svg]:w-4 [&_svg]:h-4\",\n      },\n    },\n    defaultVariants: {\n      variant: \"gray\",\n      size: \"md\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {\n  icon?: React.ReactNode\n}\n\n// TODO add icons\nfunction Badge({\n  className,\n  variant,\n  size,\n  icon,\n  children,\n  ...props\n}: BadgeProps) {\n  return (\n    <span\n      className={cn(badgeVariants({ variant, size }), className)}\n      {...props}\n    >\n      {icon && <span>{icon}</span>}\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeVariants }\n"
    }
  ],
  "type": "components:ui"
}