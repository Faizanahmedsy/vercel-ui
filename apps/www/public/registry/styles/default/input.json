{
  "name": "input",
  "files": [
    {
      "name": "input.tsx",
      "content": "import { forwardRef, useId } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst inputVariants = cva(\n  \"border flex border-gray-alpha-400 overflow-hidden bg-background-100 relative focus-within:shadow-input-ring transition-shadow duration-150\",\n  {\n    variants: {\n      size: {\n        small: \"h-8 text-sm rounded-md [--icon-size:14px]\",\n        medium: \"h-10 text-sm rounded-md [--icon-size:16px]\",\n        large: \"h-12 text-base rounded-lg [--icon-size:18px]\",\n      },\n    },\n    defaultVariants: {\n      size: \"medium\",\n    },\n  }\n)\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\" | \"prefix\">,\n    VariantProps<typeof inputVariants> {\n  prefix?: string | React.ReactNode\n  suffix?: string | React.ReactNode\n  prefixStyling?: boolean\n  suffixStyling?: boolean\n  label?: string\n}\n\nconst TextBox = ({\n  prefixStyling,\n  children,\n}: {\n  prefixStyling: boolean\n  children: React.ReactNode\n}) => {\n  return (\n    <span\n      className={cn(\n        \"text-gray-700 [&>svg]:h-[var(--icon-size)] [&>svg]:w-[var(--icon-size)] px-3 shrink-0 flex items-center\",\n        prefixStyling && \"bg-background-200\"\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst Input = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      type,\n      size,\n      label,\n      suffix,\n      prefix,\n      prefixStyling = true,\n      suffixStyling = true,\n      ...props\n    },\n    ref\n  ) => {\n    const id = useId()\n\n    const input = (\n      <div className={cn(inputVariants({ size, className }))}>\n        {prefix && (\n          <span\n            className={cn(\n              \"text-gray-700 [&>svg]:h-[var(--icon-size)] [&>svg]:w-[var(--icon-size)] px-3 shrink-0 flex items-center\",\n              prefixStyling && \"bg-background-200\"\n            )}\n          >\n            {prefix}\n          </span>\n        )}\n        <input\n          id={id}\n          type={type}\n          className={cn(\n            \"bg-transparent placeholder:text-gray-700 outline-none disabled:bg-background-200 disabled:text-gray-700 disabled:placeholder:text-gray-500 disabled:cursor-not-allowed\",\n            ((prefix && prefixStyling) || !prefix) && \"pl-3\",\n            ((suffix && suffixStyling) || !suffix) && \"pr-3\"\n          )}\n          ref={ref}\n          {...props}\n        />\n        {suffix && (\n          <span\n            className={cn(\n              \"text-gray-700 [&>svg]:h-[var(--icon-size)] [&>svg]:w-[var(--icon-size)] px-3 shrink-0 flex items-center\",\n              suffixStyling && \"bg-background-200\"\n            )}\n          >\n            {suffix}\n          </span>\n        )}\n      </div>\n    )\n\n    if (!label) return input\n\n    return (\n      <label htmlFor={id}>\n        <div className=\"mb-2 text-xs text-gray-900\">{label}</div>\n        {input}\n      </label>\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    }
  ],
  "type": "components:ui"
}