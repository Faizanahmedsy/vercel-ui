{
  "name": "stack",
  "dependencies": [
    "stack"
  ],
  "files": [
    {
      "name": "stack.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Define breakpoints and their corresponding min-widths for media queries\nconst breakpoints = {\n  sm: \"640px\", // Example breakpoint min-widths\n  md: \"768px\",\n  lg: \"1024px\",\n  xl: \"1280px\",\n}\n\ntype BreakPoint = keyof typeof breakpoints\ntype Gap = number | { [key in BreakPoint]?: number }\ntype Direction = \"column\" | \"row\" | { [key in BreakPoint]?: \"column\" | \"row\" }\n\nexport interface StackProps extends React.HTMLAttributes<HTMLDivElement> {\n  gap?: Gap\n  direction?: Direction\n  align?: \"center\" | \"flex-start\" | \"flex-end\"\n}\n\nfunction convertNumberIntoPx(n: number) {\n  return `${n * 4}px`\n}\n\nfunction convertGapToProps(gap?: Gap) {\n  if (typeof gap === \"number\") {\n    return { gap: convertNumberIntoPx(gap) } // Applies universally if gap is a number\n  } else if (gap && typeof gap === \"object\") {\n    return Object.entries(gap).reduce((acc, [breakpoint, value]) => {\n      // Use CSS variables for gap values at different breakpoints\n      acc[`--gap-${breakpoint}`] = convertNumberIntoPx(value)\n      return acc\n    }, {} as Record<string, Object>)\n  }\n  return {}\n}\n\nconst Stack = React.forwardRef<HTMLDivElement, StackProps>(\n  ({ className, gap, direction, align, ...props }, ref) => {\n    const styles = convertGapToProps(gap)\n\n    // Append styles for direction changes at specified breakpoints\n    if (direction && typeof direction === \"object\") {\n      Object.entries(direction).forEach(([breakpoint, dirValue]) => {\n        const minWidth = breakpoints[breakpoint as BreakPoint]\n        if (!styles[`@media (min-width: ${minWidth})`]) {\n          styles[`@media (min-width: ${minWidth})`] = {}\n        }\n        ;(\n          styles[`@media (min-width: ${minWidth})`] as React.CSSProperties\n        ).flexDirection = dirValue\n      })\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex [align-items:var(--align-items)]\",\n          !direction && \"flex-col\",\n          typeof gap === \"number\"\n            ? convertGapToProps(gap)\n            : [\n                gap?.sm && `sm:gap-[var(--gap-sm)]`,\n                gap?.md && `md:gap-[var(--gap-md)]`,\n                gap?.lg && `lg:gap-[var(--gap-lg)]`,\n                gap?.xl && `xl:gap-[var(--gap-xl)]`,\n              ],\n          className\n        )}\n        style={{ ...styles, \"--align-items\": align } as React.CSSProperties}\n        {...props}\n      >\n        {props.children}\n      </div>\n    )\n  }\n)\nStack.displayName = \"Stack\"\n\nexport { Stack }\n"
    }
  ],
  "type": "components:ui"
}