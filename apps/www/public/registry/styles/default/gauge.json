{
  "name": "gauge",
  "files": [
    {
      "name": "gauge.tsx",
      "content": "import React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst gaugeVariants = cva(\"flex justify-center items-center relative\", {\n  variants: {\n    size: {\n      tiny: \"[--circle-size-d:20px] [--stroke-width:15] [--text-size:0px] [--text-weight:0]\",\n      small:\n        \"[--circle-size-d:32px] [--stroke-width:10] [--text-size:11px] [--text-weight:500]\",\n      medium:\n        \"[--circle-size-d:64px] [--stroke-width:10] [--text-size:18px] [--text-weight:500]\",\n      large:\n        \"[--circle-size-d:128px] [--stroke-width:10] [--text-size:32px] [--text-weight:600]\",\n    },\n  },\n  defaultVariants: {\n    size: \"medium\",\n  },\n})\n\nconst sizes = {\n  tiny: { circle: 20 },\n  small: { circle: 32 },\n  medium: { circle: 64 },\n  large: { circle: 128 },\n}\ninterface GaugeProps {\n  size: keyof typeof sizes\n  value: number\n  showValue?: boolean\n  colors?:\n    | {\n        primary: string\n        secondary: string\n      }\n    | Partial<\n        Record<\n          | \"0\"\n          | \"10\"\n          | \"20\"\n          | \"30\"\n          | \"40\"\n          | \"50\"\n          | \"60\"\n          | \"70\"\n          | \"80\"\n          | \"90\"\n          | \"100\",\n          string\n        >\n      >\n}\n\n// TODO fix the 0 value case\nconst Gauge: React.FC<GaugeProps> = ({\n  size = \"medium\",\n  value,\n  showValue,\n  colors,\n}) => {\n  const circleSize = 100\n\n  const secondaryColor =\n    colors && \"secondary\" in colors\n      ? `hsl(${colors.secondary})`\n      : \"var(--ds-gray-alpha-400)\"\n  const primaryColor = colors\n    ? \"primary\" in colors\n      ? `hsl(${colors.primary})`\n      : colors[`${Math.round(value / 10) * 10}` as keyof typeof colors]\n        ? `hsl(${\n            colors[`${Math.round(value / 10) * 10}` as keyof typeof colors]\n          })`\n        : `hsl(${\n            colors[\n              Object.keys(colors).reduce((prev, curr) =>\n                Math.abs(Number(curr) - value) < Math.abs(Number(prev) - value)\n                  ? curr\n                  : prev\n              ) as keyof typeof colors\n            ]\n          })`\n    : value >= 68\n      ? \"hsl(var(--ds-green-700))\"\n      : value >= 34\n        ? \"hsl(var(--ds-amber-700))\"\n        : \"hsl(var(--ds-red-800))\"\n\n  return (\n    <div\n      className={gaugeVariants({ size })}\n      style={{\n        // @ts-ignore\n        \"--circle-size\": `${100}px`,\n        \"--circumference\": `${2827433388230814}px`,\n        \"--percent-to-px\": `${2.827433388230814}px`,\n        \"--gap-percent\": `${5}`,\n        \"--offset-factor\": `${0}`,\n        \"--secondary-color\": `${secondaryColor}`,\n        \"--primary-color\": `${primaryColor}`,\n      }}\n    >\n      <svg\n        fill=\"none\"\n        viewBox=\"0 0 100 100\"\n        height={sizes[size].circle}\n        width={sizes[size].circle}\n        strokeWidth=\"2\"\n      >\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n          strokeWidth=\"10\"\n          strokeDashoffset=\"0\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className={cn(\n            \"stroke-[var(--secondary-color)] transition-all duration-1000 ease-in-out\",\n            \"[stroke-dasharray:calc(var(--stroke-percent)_*_var(--percent-to-px))_var(--circumference)]\",\n            \"[transition-property:stroke-dasharray,tranform]\",\n            \"[transform:rotate(calc(1turn_-_90deg_-(var(--gap-percent)_*_var(--percent-to-deg)_*_var(--offset-factor-secondary))))_scaleY(-1)]\",\n            \"[transform-origin:calc(var(--circle-size)_/_2)_calc(var(--circle-size)_/_2)]\"\n          )}\n          style={{\n            opacity: 1,\n            // @ts-ignore\n            \"--stroke-percent\": Math.max(0, 100 - value - 10),\n            \"--percent-to-deg\": \"3.6deg\",\n            \"--offset-factor-secondary\": \"calc(1 - var(--offset-factor))\",\n          }}\n        ></circle>\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n          strokeWidth=\"10\"\n          strokeDashoffset=\"0\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          data-geist-progress-circle-fg=\"\"\n          className={cn(\n            \"stroke-[var(--primary-color)] transition-all duration-1000 ease-in-out\",\n            \"[stroke-dasharray:calc(var(--stroke-percent)_*_var(--percent-to-px))_var(--circumference)]\",\n            \"[transition-property:stroke-dasharray,tranform]\",\n            \"[transform:rotate(calc(-90deg_+_var(--gap-percent)_*_var(--offset-factor)_*_var(--percent-to-deg)))]\",\n            \"[transform-origin:calc(var(--circle-size)_/_2)_calc(var(--circle-size)_/_2)]\"\n          )}\n          style={{\n            opacity: 1,\n            // @ts-ignore\n            \"--stroke-percent\": value,\n            \"--percent-to-deg\": \"3.6deg\",\n          }}\n        ></circle>\n      </svg>\n      {showValue && size !== \"tiny\" && (\n        <div className=\"absolute text-center\">\n          <p className=\"[font-size:var(--text-size)] [font-weight:var(--text-weight)]\">\n            {value}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport { Gauge }\n"
    }
  ],
  "type": "components:ui"
}